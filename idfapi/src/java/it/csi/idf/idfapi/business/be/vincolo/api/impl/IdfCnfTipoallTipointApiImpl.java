/*
 * Created on 2020-10-04 ( Time 22:37:05 )
 * Generated by Telosys Tools Generator ( version 3.1.2 )
 */
package it.csi.idf.idfapi.business.be.vincolo.api.impl;

import java.math.BigDecimal;
import java.util.List;

import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;

import org.springframework.beans.factory.annotation.Autowired;

import it.csi.idf.idfapi.business.be.vincolo.api.IdfCnfTipoallTipointApi;
import it.csi.idf.idfapi.business.be.vincolo.pojo.IdfCnfTipoallTipoint;
import it.csi.idf.idfapi.business.be.vincolo.service.IdfCnfTipoallTipointService;
import it.csi.idf.idfapi.util.SpringSupportedResource;
/**
 * JAXRS Jersey controller for 'IdfCnfTipoallTipoint'ApiImpl management.
 */
@Path("/idfCnfTipoallTipoint")
public class IdfCnfTipoallTipointApiImpl extends SpringSupportedResource implements  IdfCnfTipoallTipointApi{
	
	@Autowired
	private IdfCnfTipoallTipointService idfCnfTipoallTipointService ;

	/**
	 * Constructor
	 */
	public IdfCnfTipoallTipointApiImpl() {
		super();
		logger.info("Constructor.");
	}

	/**
	 * Get all idfCnfTipoallTipoint entities.
	 * @return list with all entities found
	 */
	@Override
	@GET
	@Produces({MediaType.APPLICATION_JSON})
	public List<IdfCnfTipoallTipoint> findAll() {
		logger.info("findAll()...");
		return idfCnfTipoallTipointService.findAll();
	}

	/**
	 * Retrieves a idfCnfTipoallTipoint using the given id.
	 * @param idTipoAllegato idTipoAllegato
	 * @param idTipoIntervento idTipoIntervento
	 * @return 200 + body if found, 404 if not found 
	 */
	@Override
	@GET
	@Path("{idTipoAllegato}/{idTipoIntervento}")
	@Produces({MediaType.APPLICATION_JSON})
	public Response findById(@PathParam("idTipoAllegato") Integer idTipoAllegato, @PathParam("idTipoIntervento") BigDecimal idTipoIntervento) {
		logger.info("findById("+idTipoAllegato+idTipoIntervento+")...");
		IdfCnfTipoallTipoint record = idfCnfTipoallTipointService.findById(idTipoAllegato, idTipoIntervento);
		if ( record != null ) {
			return Response.ok(record).build();
		}
		else {
			return Response.status(Status.NOT_FOUND).build();
		}
	}

	/**
	 * Creates a new idfCnfTipoallTipoint.
	 * @param idfCnfTipoallTipoint idfCnfTipoallTipoint
	 * @return 201 with body if created, 409 conflict if duplicate key 
	 */	
	@Override
	@POST
	@Consumes({MediaType.APPLICATION_JSON})
	@Produces({MediaType.APPLICATION_JSON})
	public Response create(IdfCnfTipoallTipoint idfCnfTipoallTipoint) {
		logger.info("create()...");
		if ( idfCnfTipoallTipointService.exists(idfCnfTipoallTipoint) ) {
			logger.info("create() : already exists -> conflict");
			return Response.status(Status.CONFLICT).build();
		}
		else {
			logger.info("create() : doesn't exist -> create");
			IdfCnfTipoallTipoint record = idfCnfTipoallTipointService.create(idfCnfTipoallTipoint);
			return Response.status(Status.CREATED).entity(record).build();
		}
	}

//------------------------------------------------------------
	/**
	 * Updates the idfCnfTipoallTipoint identified by the given id
	 * @param idfCnfTipoallTipoint idfCnfTipoallTipoint entity
	 * @param idTipoAllegato idTipoAllegato 
	 * @param idTipoIntervento idTipoIntervento 
	 * @return 200 if found and updated, 404 if not found 
	 */	
	@Override
	@PUT
	@Path("{idTipoAllegato}/{idTipoIntervento}")
	@Consumes({MediaType.APPLICATION_JSON})
	@Produces({MediaType.APPLICATION_JSON})
	// public IdfCnfTipoallTipoint update(IdfCnfTipoallTipoint idfCnfTipoallTipoint, @PathParam("idTipoAllegato") Integer idTipoAllegato, @PathParam("idTipoIntervento") BigDecimal idTipoIntervento) {
	public Response update(IdfCnfTipoallTipoint idfCnfTipoallTipoint, @PathParam("idTipoAllegato") Integer idTipoAllegato, @PathParam("idTipoIntervento") BigDecimal idTipoIntervento) {
		logger.info("update()...");
		// force the id (use the id provided by the URL)
		idfCnfTipoallTipoint.setIdTipoAllegato( idTipoAllegato );
		idfCnfTipoallTipoint.setIdTipoIntervento( idTipoIntervento );
		 boolean updated = idfCnfTipoallTipointService.update(idfCnfTipoallTipoint);
		if ( updated) {
			// Actually updated (found and updated) => 200 OK
			return Response.status(Status.OK).build();
		}
		else {
			// Not updated with no error => 404 not found
			return Response.status(Status.NOT_FOUND).build();
		}
	}

	/**
	 * Save (create or update) the given idfCnfTipoallTipoint.
	 * @param idfCnfTipoallTipoint idfCnfTipoallTipoint entity
	 * @return 200 if found and updated, 201 if not found and created
	 */	
	@Override
	@PUT
	@Consumes({MediaType.APPLICATION_JSON})
	@Produces({MediaType.APPLICATION_JSON})
	public Response save(IdfCnfTipoallTipoint idfCnfTipoallTipoint) {
		logger.info("save()...");
		Status status = Status.OK ; // 200 OK
		if ( ! idfCnfTipoallTipointService.exists(idfCnfTipoallTipoint) ) {
			status = Status.CREATED ; // 201 CREATED
		}
		IdfCnfTipoallTipoint record = idfCnfTipoallTipointService.create(idfCnfTipoallTipoint);
		// Response ( code 200 or 201 )
		return Response.status(status).entity(record).build();
	}


//------------------------------------------------------------
	/**
	 * Delete a idfCnfTipoallTipoint.
	 * @param idTipoAllegato idTipoAllegato
	 * @param idTipoIntervento idTipoIntervento
	 */
	@Override
	@DELETE
	@Path("{idTipoAllegato}/{idTipoIntervento}")
	//@Consumes({MediaType.APPLICATION_JSON})
	// public void delete(@PathParam("idTipoAllegato") Integer idTipoAllegato, @PathParam("idTipoIntervento") BigDecimal idTipoIntervento) {
	public Response delete(@PathParam("idTipoAllegato") Integer idTipoAllegato, @PathParam("idTipoIntervento") BigDecimal idTipoIntervento) {
		logger.info("delete("+idTipoAllegato+idTipoIntervento+")...");
		// idfCnfTipoallTipointService.deleteById(idTipoAllegato, idTipoIntervento);
		boolean deleted = idfCnfTipoallTipointService.deleteById(idTipoAllegato, idTipoIntervento);
		if ( deleted ) {
			// Actually deleted (found and deleted) => 204 "No Content" because no body in the response 
			return Response.status(Status.NO_CONTENT).build();
		}
		else {
			// Not deleted with no error => 404 "Not found"
			return Response.status(Status.NOT_FOUND).build();
		}
}

	

}
