/*
 * Created on 2020-10-04 ( Time 22:37:05 )
 * Generated by Telosys Tools Generator ( version 3.1.2 )
 */
package it.csi.idf.idfapi.business.be.vincolo.api.impl;

import java.util.List;

import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;

import org.springframework.beans.factory.annotation.Autowired;

import it.csi.idf.idfapi.business.be.vincolo.api.IdfGeoPlIntervVincidroApi;
import it.csi.idf.idfapi.business.be.vincolo.pojo.IdfGeoPlIntervVincidro;
import it.csi.idf.idfapi.business.be.vincolo.service.IdfGeoPlIntervVincidroService;
import it.csi.idf.idfapi.util.SpringSupportedResource;
/**
 * JAXRS Jersey controller for 'IdfGeoPlIntervVincidro'ApiImpl management.
 */
@Path("/idfGeoPlIntervVincidro")
public class IdfGeoPlIntervVincidroApiImpl extends SpringSupportedResource implements  IdfGeoPlIntervVincidroApi{
	
	@Autowired
	private IdfGeoPlIntervVincidroService idfGeoPlIntervVincidroService ;

	/**
	 * Constructor
	 */
	public IdfGeoPlIntervVincidroApiImpl() {
		super();
		logger.info("Constructor.");
	}

	/**
	 * Get all idfGeoPlIntervVincidro entities.
	 * @return list with all entities found
	 */
	@Override
	@GET
	@Produces({MediaType.APPLICATION_JSON})
	public List<IdfGeoPlIntervVincidro> findAll() {
		logger.info("findAll()...");
		return idfGeoPlIntervVincidroService.findAll();
	}

	/**
	 * Retrieves a idfGeoPlIntervVincidro using the given id.
	 * @param idGeoPlIntervVincidro idGeoPlIntervVincidro
	 * @return 200 + body if found, 404 if not found 
	 */
	@Override
	@GET
	@Path("{idGeoPlIntervVincidro}")
	@Produces({MediaType.APPLICATION_JSON})
	public Response findById(@PathParam("idGeoPlIntervVincidro") Integer idGeoPlIntervVincidro) {
		logger.info("findById("+idGeoPlIntervVincidro+")...");
		IdfGeoPlIntervVincidro record = idfGeoPlIntervVincidroService.findById(idGeoPlIntervVincidro);
		if ( record != null ) {
			return Response.ok(record).build();
		}
		else {
			return Response.status(Status.NOT_FOUND).build();
		}
	}

	/**
	 * Creates a new idfGeoPlIntervVincidro.
	 * @param idfGeoPlIntervVincidro idfGeoPlIntervVincidro
	 * @return 201 with body if created, 409 conflict if duplicate key 
	 */	
	@Override
	@POST
	@Consumes({MediaType.APPLICATION_JSON})
	@Produces({MediaType.APPLICATION_JSON})
	public Response create(IdfGeoPlIntervVincidro idfGeoPlIntervVincidro) {
		logger.info("create()...");
		if ( idfGeoPlIntervVincidroService.exists(idfGeoPlIntervVincidro) ) {
			logger.info("create() : already exists -> conflict");
			return Response.status(Status.CONFLICT).build();
		}
		else {
			logger.info("create() : doesn't exist -> create");
			IdfGeoPlIntervVincidro record = idfGeoPlIntervVincidroService.create(idfGeoPlIntervVincidro);
			return Response.status(Status.CREATED).entity(record).build();
		}
	}

//------------------------------------------------------------
	/**
	 * Updates the idfGeoPlIntervVincidro identified by the given id
	 * @param idfGeoPlIntervVincidro idfGeoPlIntervVincidro entity
	 * @param idGeoPlIntervVincidro idGeoPlIntervVincidro 
	 * @return 200 if found and updated, 404 if not found 
	 */	
	@Override
	@PUT
	@Path("{idGeoPlIntervVincidro}")
	@Consumes({MediaType.APPLICATION_JSON})
	@Produces({MediaType.APPLICATION_JSON})
	// public IdfGeoPlIntervVincidro update(IdfGeoPlIntervVincidro idfGeoPlIntervVincidro, @PathParam("idGeoPlIntervVincidro") Integer idGeoPlIntervVincidro) {
	public Response update(IdfGeoPlIntervVincidro idfGeoPlIntervVincidro, @PathParam("idGeoPlIntervVincidro") Integer idGeoPlIntervVincidro) {
		logger.info("update()...");
		// force the id (use the id provided by the URL)
		idfGeoPlIntervVincidro.setIdGeoPlIntervVincidro( idGeoPlIntervVincidro );
		boolean updated = idfGeoPlIntervVincidroService.update(idfGeoPlIntervVincidro);
		if ( updated ) {
			// Actually updated (found and updated) => 200 OK
			return Response.status(Status.OK).build();
		}
		else {
			// Not updated with no error => 404 not found
			return Response.status(Status.NOT_FOUND).build();
		}
	}

	/**
	 * Save (create or update) the given idfGeoPlIntervVincidro.
	 * @param idfGeoPlIntervVincidro idfGeoPlIntervVincidro entity
	 * @return 200 if found and updated, 201 if not found and created
	 */	
	@Override
	@PUT
	@Consumes({MediaType.APPLICATION_JSON})
	@Produces({MediaType.APPLICATION_JSON})
	public Response save(IdfGeoPlIntervVincidro idfGeoPlIntervVincidro) {
		logger.info("save()...");
		Status status = Status.OK ; // 200 OK
		if ( ! idfGeoPlIntervVincidroService.exists(idfGeoPlIntervVincidro) ) {
			status = Status.CREATED ; // 201 CREATED
		}
		IdfGeoPlIntervVincidro record = idfGeoPlIntervVincidroService.create(idfGeoPlIntervVincidro);
		// Response ( code 200 or 201 )
		return Response.status(status).entity(record).build();
	}


//------------------------------------------------------------
	/**
	 * Delete a idfGeoPlIntervVincidro.
	 * @param idGeoPlIntervVincidro idGeoPlIntervVincidro
	 */
	@Override
	@DELETE
	@Path("{idGeoPlIntervVincidro}")
	//@Consumes({MediaType.APPLICATION_JSON})
	// public void delete(@PathParam("idGeoPlIntervVincidro") Integer idGeoPlIntervVincidro) {
	public Response delete(@PathParam("idGeoPlIntervVincidro") Integer idGeoPlIntervVincidro) {
		logger.info("delete("+idGeoPlIntervVincidro+")...");
		// idfGeoPlIntervVincidroService.deleteById(idGeoPlIntervVincidro);
		boolean deleted = idfGeoPlIntervVincidroService.deleteById(idGeoPlIntervVincidro);
		if ( deleted ) {
			// Actually deleted (found and deleted) => 204 "No Content" because no body in the response 
			return Response.status(Status.NO_CONTENT).build();
		}
		else {
			// Not deleted with no error => 404 "Not found"
			return Response.status(Status.NOT_FOUND).build();
		}
}

	

}
