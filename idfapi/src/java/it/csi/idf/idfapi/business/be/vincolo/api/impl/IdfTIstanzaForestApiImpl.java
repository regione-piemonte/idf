/*
 * Created on 2020-10-04 ( Time 22:37:06 )
 * Generated by Telosys Tools Generator ( version 3.1.2 )
 */
package it.csi.idf.idfapi.business.be.vincolo.api.impl;

import java.math.BigDecimal;
import java.util.List;

import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;

import org.springframework.beans.factory.annotation.Autowired;

import it.csi.idf.idfapi.business.be.vincolo.api.IdfTIstanzaForestApi;
import it.csi.idf.idfapi.business.be.vincolo.pojo.IdfTIstanzaForest;
import it.csi.idf.idfapi.business.be.vincolo.service.IdfTIstanzaForestService;
import it.csi.idf.idfapi.util.SpringSupportedResource;
/**
 * JAXRS Jersey controller for 'IdfTIstanzaForest'ApiImpl management.
 */
@Path("/idfTIstanzaForest")
public class IdfTIstanzaForestApiImpl extends SpringSupportedResource implements  IdfTIstanzaForestApi{
	
	@Autowired
	private IdfTIstanzaForestService idfTIstanzaForestService ;

	/**
	 * Constructor
	 */
	public IdfTIstanzaForestApiImpl() {
		super();
		logger.info("Constructor.");
	}

	/**
	 * Get all idfTIstanzaForest entities.
	 * @return list with all entities found
	 */
	@Override
	@GET
	@Produces({MediaType.APPLICATION_JSON})
	public List<IdfTIstanzaForest> findAll() {
		logger.info("findAll()...");
		return idfTIstanzaForestService.findAll();
	}

	/**
	 * Retrieves a idfTIstanzaForest using the given id.
	 * @param idIstanzaIntervento idIstanzaIntervento
	 * @return 200 + body if found, 404 if not found 
	 */
	@Override
	@GET
	@Path("{idIstanzaIntervento}")
	@Produces({MediaType.APPLICATION_JSON})
	public Response findById(@PathParam("idIstanzaIntervento") BigDecimal idIstanzaIntervento) {
		logger.info("findById("+idIstanzaIntervento+")...");
		IdfTIstanzaForest record = idfTIstanzaForestService.findById(idIstanzaIntervento);
		if ( record != null ) {
			return Response.ok(record).build();
		}
		else {
			return Response.status(Status.NOT_FOUND).build();
		}
	}

	/**
	 * Creates a new idfTIstanzaForest.
	 * @param idfTIstanzaForest idfTIstanzaForest
	 * @return 201 with body if created, 409 conflict if duplicate key 
	 */	
	@Override
	@POST
	@Consumes({MediaType.APPLICATION_JSON})
	@Produces({MediaType.APPLICATION_JSON})
	public Response create(IdfTIstanzaForest idfTIstanzaForest) {
		logger.info("create()...");
		if ( idfTIstanzaForestService.exists(idfTIstanzaForest) ) {
			logger.info("create() : already exists -> conflict");
			return Response.status(Status.CONFLICT).build();
		}
		else {
			logger.info("create() : doesn't exist -> create");
			IdfTIstanzaForest record = idfTIstanzaForestService.create(idfTIstanzaForest);
			return Response.status(Status.CREATED).entity(record).build();
		}
	}

//------------------------------------------------------------
	/**
	 * Updates the idfTIstanzaForest identified by the given id
	 * @param idfTIstanzaForest idfTIstanzaForest entity
	 * @param idIstanzaIntervento idIstanzaIntervento 
	 * @return 200 if found and updated, 404 if not found 
	 */	
	@Override
	@PUT
	@Path("{idIstanzaIntervento}")
	@Consumes({MediaType.APPLICATION_JSON})
	@Produces({MediaType.APPLICATION_JSON})
	// public IdfTIstanzaForest update(IdfTIstanzaForest idfTIstanzaForest, @PathParam("idIstanzaIntervento") BigDecimal idIstanzaIntervento) {
	public Response update(IdfTIstanzaForest idfTIstanzaForest, @PathParam("idIstanzaIntervento") BigDecimal idIstanzaIntervento) {
		logger.info("update()...");
		// force the id (use the id provided by the URL)
		idfTIstanzaForest.setIdIstanzaIntervento( idIstanzaIntervento );
		boolean updated = idfTIstanzaForestService.update(idfTIstanzaForest);
		if ( updated ) {
			// Actually updated (found and updated) => 200 OK
			return Response.status(Status.OK).build();
		}
		else {
			// Not updated with no error => 404 not found
			return Response.status(Status.NOT_FOUND).build();
		}
	}

	/**
	 * Save (create or update) the given idfTIstanzaForest.
	 * @param idfTIstanzaForest idfTIstanzaForest entity
	 * @return 200 if found and updated, 201 if not found and created
	 */	
	@Override
	@PUT
	@Consumes({MediaType.APPLICATION_JSON})
	@Produces({MediaType.APPLICATION_JSON})
	public Response save(IdfTIstanzaForest idfTIstanzaForest) {
		logger.info("save()...");
		Status status = Status.OK ; // 200 OK
		if ( ! idfTIstanzaForestService.exists(idfTIstanzaForest) ) {
			status = Status.CREATED ; // 201 CREATED
		}
		IdfTIstanzaForest record = idfTIstanzaForestService.create(idfTIstanzaForest);
		// Response ( code 200 or 201 )
		return Response.status(status).entity(record).build();
	}


//------------------------------------------------------------
	/**
	 * Delete a idfTIstanzaForest.
	 * @param idIstanzaIntervento idIstanzaIntervento
	 */
	@Override
	@DELETE
	@Path("{idIstanzaIntervento}")
	//@Consumes({MediaType.APPLICATION_JSON})
	// public void delete(@PathParam("idIstanzaIntervento") BigDecimal idIstanzaIntervento) {
	public Response delete(@PathParam("idIstanzaIntervento") BigDecimal idIstanzaIntervento) {
		logger.info("delete("+idIstanzaIntervento+")...");
		// idfTIstanzaForestService.deleteById(idIstanzaIntervento);
		boolean deleted = idfTIstanzaForestService.deleteById(idIstanzaIntervento);
		if ( deleted ) {
			// Actually deleted (found and deleted) => 204 "No Content" because no body in the response 
			return Response.status(Status.NO_CONTENT).build();
		}
		else {
			// Not deleted with no error => 404 "Not found"
			return Response.status(Status.NOT_FOUND).build();
		}
}

	

}
